{"version":3,"file":"index.js","sources":["../src/gitlogs.js"],"sourcesContent":["const { lstatSync, readdirSync } = require('fs');\nconst { join } = require('path');\nconst { exec } = require('child_process');\nconst args = require('yargs').argv;\nconst dayjs = require('dayjs');\nconst dlv = require('dlv');\nconst { cyan, bold, dim } = require('kleur');\n\nconst defaultSkippedDirectories = ['node_modules', 'public', '.git', '_scripts', 'app', 'vendor'];\n\nconst currentDate = dayjs();\nconst startDate = currentDate\n  .set('hour', 0)\n  .set('minute', 0)\n  .set('second', 0)\n  .format();\n\nconst currentPath = __dirname;\n\nconst author = dlv(args, 'author', '$GIT_USER');\nconst since = dlv(args, 'since', startDate);\nconst until = dlv(args, 'until', currentDate.format());\nconst projectPath = dlv(args, 'projectPath', __dirname);\nconst skipDirectoriesArg = dlv(args, 'skipDirectories', false);\n\nconst skipDirectories = [\n  ...(skipDirectoriesArg ? skipDirectoriesArg.split(',') : []),\n  ...defaultSkippedDirectories,\n];\n\nconst isDirectory = source => lstatSync(source).isDirectory();\nconst getDirectoriesInFolder = source =>\n  readdirSync(source)\n    .map(name => join(source, name))\n    .filter(isDirectory);\n\nconst directories = getDirectoriesInFolder(projectPath);\n\nconsole.log('\\n');\ngetGitDirectory(directories);\n\nfunction getGitDirectory(directories) {\n  directories.forEach(directory => {\n    if (directory.match(/\\.git/)) {\n      exec(\n        `cd ${directory}; git log --since=${since} --until=\"${until}\" --author=\"${author}\" --pretty=format:%s --no-merges --reverse | cat`,\n        (err, stdout, stderr) => {\n          if (err) return;\n          if (stdout === '') return;\n          console.log(cyan(bold(directory)));\n          console.log(`${stdout}`);\n          console.log('\\n');\n        }\n      );\n    }\n\n    let directoryIsAllowed = true;\n    skipDirectories.forEach(string => {\n      if (new RegExp(string).test(directory) && directoryIsAllowed === true)\n        directoryIsAllowed = false;\n    });\n\n    if (directoryIsAllowed === false) {\n      return;\n    }\n\n    if (isDirectory(directory)) {\n      const lowerDirectories = getDirectoriesInFolder(directory);\n      getGitDirectory(lowerDirectories);\n    }\n  });\n}\n"],"names":["require","args","argv","dayjs","dlv","currentDate","startDate","set","format","author","since","until","projectPath","__dirname","skipDirectoriesArg","skipDirectories","split","isDirectory","source","lstatSync","getDirectoriesInFolder","readdirSync","map","name","join","filter","directories","console","log","getGitDirectory","forEach","directory","match","exec","err","stdout","stderr","cyan","bold","directoryIsAllowed","string","RegExp","test","lowerDirectories"],"mappings":"MAAmCA,QAAQ,sCAC1BA,QAAQ,eACRA,QAAQ,sBACnBC,EAAOD,QAAQ,SAASE,KACxBC,EAAQH,QAAQ,SAChBI,EAAMJ,QAAQ,SACQA,QAAQ,2BAI9BK,EAAcF,IACdG,EAAYD,EACfE,IAAI,OAAQ,GACZA,IAAI,SAAU,GACdA,IAAI,SAAU,GACdC,SAIGC,EAASL,EAAIH,EAAM,SAAU,aAC7BS,EAAQN,EAAIH,EAAM,QAASK,GAC3BK,EAAQP,EAAIH,EAAM,QAASI,EAAYG,UACvCI,EAAcR,EAAIH,EAAM,cAAeY,WACvCC,EAAqBV,EAAIH,EAAM,mBAAmB,GAElDc,GACAD,EAAqBA,EAAmBE,MAAM,KAAO,WAlBzB,CAAC,eAAgB,SAAU,OAAQ,WAAY,MAAO,WAsBlFC,WAAcC,UAAUC,EAAUD,GAAQD,eAC1CG,WAAyBF,UAC7BG,EAAYH,GACTI,aAAIC,UAAQC,EAAKN,EAAQK,KACzBE,OAAOR,IAENS,EAAcN,EAAuBR,GAE3Ce,QAAQC,IAAI,MAGZ,SAASC,EAAgBH,GACvBA,EAAYI,iBAAQC,GACdA,EAAUC,MAAM,UAClBC,QACQF,uBAA8BrB,eAAkBC,iBAAoBF,8DACzEyB,EAAKC,EAAQC,GACRF,GACW,KAAXC,IACJR,QAAQC,IAAIS,EAAKC,EAAKP,KACtBJ,QAAQC,OAAOO,GACfR,QAAQC,IAAI,aAKdW,GAAqB,KACzBxB,EAAgBe,iBAAQU,GAClB,IAAIC,OAAOD,GAAQE,KAAKX,KAAqC,IAAvBQ,IACxCA,GAAqB,MAGE,IAAvBA,GAIAtB,EAAYc,GAAY,KACpBY,EAAmBvB,EAAuBW,GAChDF,EAAgBc,MA7BtBd,CAAgBH"}